{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"runbooks/_TEMPLATE_runbook/","title":"Runbook: &lt;short title&gt;","text":""},{"location":"runbooks/_TEMPLATE_runbook/#purpose","title":"Purpose","text":"<p>What operational task this covers.</p>"},{"location":"runbooks/_TEMPLATE_runbook/#preconditions","title":"Preconditions","text":"<ul> <li>Auth to the UniFi controller</li> <li>Correct <code>../secrets/*.auto.tfvars</code> in place</li> </ul>"},{"location":"runbooks/_TEMPLATE_runbook/#steps","title":"Steps","text":"<ol> <li>Checkout a new branch</li> <li>Edit the relevant env root under <code>terraform/envs/&lt;env&gt;/unifi</code></li> <li><code>terraform -chdir=terraform/envs/&lt;env&gt;/unifi plan -var-file=../secrets/&lt;env&gt;.auto.tfvars</code></li> <li>Open a PR; ensure CI passes and required checks are green</li> <li>Merge; apply if not done in CI</li> </ol>"},{"location":"runbooks/_TEMPLATE_runbook/#rollback","title":"Rollback","text":"<p>Revert the PR and re\u2011apply the previous state.</p>"},{"location":"runbooks/vault_bootstrap_runbook/","title":"Vault Bootstrap Runbook [Synology NAS, Portainer stack]","text":"<p>Scope: minimal, temporary Vault with Raft storage and TLS. Single node. Non-root uid,gid. Audience: SRE on NAS01. Hostname: <code>vault</code> and <code>vault.SpecterRealm.com</code>.</p>"},{"location":"runbooks/vault_bootstrap_runbook/#tldr","title":"TL,DR","text":"<ul> <li>[ ] Confirm container is up, hostname is <code>vault</code>, web UI loads</li> <li>[ ] Set env in the Vault container: <code>VAULT_ADDR</code>, <code>VAULT_CACERT</code>, <code>VAULT_TOKEN</code></li> <li>[ ] If first run, init then unseal with 3 keys</li> <li>[ ] Run <code>scripts/vault/init.sh</code> bootstrap (or <code>/tmp/init.sh</code> inside container if testing), or execute equivalent manual steps below</li> <li>[ ] Store unseal shares and root token in M365 Secure Notes</li> <li>[ ] Enable audit to file, seed initial secrets, take a Raft snapshot</li> <li>[ ] Add the backup paths to Hyper Backup</li> </ul>"},{"location":"runbooks/vault_bootstrap_runbook/#constants","title":"Constants","text":"<ul> <li>Vault URL: <code>https://vault.SpecterRealm.com:8200</code></li> <li>In-container URL: <code>https://vault:8200</code></li> <li>CA and certs in container: <code>/pki/ca.pem</code>, <code>/pki/vault.crt</code>, <code>/pki/vault.key</code></li> <li>Data: <code>/volume1/docker/appdata/vault/data</code></li> <li>Audit: <code>/volume1/docker/appdata/vault/audit</code></li> <li>Config: <code>/volume1/docker/appdata/vault/config/vault.hcl</code></li> <li>Run as <code>user: \"1030:100\"</code>, <code>SKIP_SETCAP=true</code>, <code>disable_mlock=true</code></li> </ul>"},{"location":"runbooks/vault_bootstrap_runbook/#prerequisites","title":"Prerequisites","text":"<ul> <li>Portainer stack deployed with volumes bound to the paths above.</li> <li>TLS files exist and are mounted as files, not a directory.</li> <li>Container hostname set to <code>vault</code> in the stack.</li> <li>The CA that signed <code>vault.crt</code> is present at <code>/pki/ca.pem</code> in the container.</li> </ul> <p>Sanity: <pre><code># inside the vault container shell\nexport VAULT_ADDR=https://vault:8200\nexport VAULT_CACERT=/pki/ca.pem\nvault status || true\n</code></pre></p>"},{"location":"runbooks/vault_bootstrap_runbook/#initialize-and-unseal","title":"Initialize and Unseal","text":"<p>Initialize on first ever run: <pre><code>vault operator init -key-shares=5 -key-threshold=3\n# Save: 5 unseal keys, root token. Store in M365.\n</code></pre></p> <p>Unseal: <pre><code>vault operator unseal    # run 3 times with different keys\nvault status             # should show Sealed=false, Mode=active\n</code></pre></p> <p>Lost root token? Generate a new one: <pre><code>vault operator generate-root -generate-otp\nvault operator generate-root -init -otp=&lt;otp&gt;   # copy Nonce\nvault operator generate-root -nonce=&lt;nonce&gt;     # repeat 3 times, paste different unseal keys\nvault operator generate-root -decode=&lt;encoded_token&gt; -otp=&lt;otp&gt;  # new root token\n</code></pre></p>"},{"location":"runbooks/vault_bootstrap_runbook/#one-shot-bootstrap-script","title":"One-shot Bootstrap Script","text":"<p>Create and run the script inside the vault container.</p> <pre><code>cat &gt; /tmp/init.sh &lt;&lt;'EOF'\n#!/usr/bin/env sh\nset -euo pipefail\n\nVAULT_ADDR=\"${VAULT_ADDR:-https://vault:8200}\"\nVAULT_CACERT=\"${VAULT_CACERT:-/pki/ca.pem}\"\nROOT_TOKEN=\"${VAULT_TOKEN:-}\"\n\nCF_API_TOKEN=\"${CF_API_TOKEN:-}\"          # optional seed\nPG_USER=\"${PG_USER:-svc_app}\"\nPG_PASS=\"${PG_PASS:-}\"                    # optional seed\nPG_URL=\"${PG_URL:-postgres://db:5432/app}\"\n\nif [ -z \"${ROOT_TOKEN}\" ]; then\n  echo \"ERROR: VAULT_TOKEN (root) not set\" &gt;&amp;2\n  exit 1\nfi\n\nexport VAULT_ADDR VAULT_CACERT VAULT_TOKEN=\"${ROOT_TOKEN}\"\n\nvault status || true\n\n# Enable KV v2\nvault secrets list -format=json | grep -q '\"kv/\":' || \\\n  vault secrets enable -path=kv kv-v2\n\n# Policies\ncat &gt;/tmp/admin.hcl &lt;&lt;'POLICY'\npath \"sys/*\"  { capabilities = [\"create\",\"read\",\"update\",\"delete\",\"list\",\"sudo\"] }\npath \"auth/*\" { capabilities = [\"create\",\"read\",\"update\",\"delete\",\"list\",\"sudo\"] }\npath \"kv/*\"   { capabilities = [\"create\",\"read\",\"update\",\"delete\",\"list\"] }\nPOLICY\nvault policy write admin /tmp/admin.hcl\n\ncat &gt;/tmp/service.hcl &lt;&lt;'POLICY'\npath \"kv/data/*\"     { capabilities = [\"read\"] }\npath \"kv/metadata/*\" { capabilities = [\"list\"] }\nPOLICY\nvault policy write service /tmp/service.hcl\n\n# Auth\nvault auth list -format=json | grep -q '\"userpass/\":' || \\\n  vault auth enable userpass\n\nADMIN_PW=\"${ADMIN_PW:-$(head -c 18 /dev/urandom | base64)}\"\nvault write auth/userpass/users/admin password=\"${ADMIN_PW}\" policies=admin\necho \"BOOTSTRAP_ADMIN_USER=admin\"\necho \"BOOTSTRAP_ADMIN_PASS=${ADMIN_PW}\"\n\nif [ -n \"${PG_PASS}\" ] || [ -n \"${CF_API_TOKEN}\" ]; then\n  SVC_PW=\"${SVC_PW:-$(head -c 18 /dev/urandom | base64)}\"\n  vault write auth/userpass/users/svc password=\"${SVC_PW}\" policies=service\n  echo \"SERVICE_USER=svc\"\n  echo \"SERVICE_PASS=${SVC_PW}\"\nfi\n\n# Audit\nmkdir -p /vault/audit\nvault audit list -format=json | grep -q '\"file/\":' || \\\n  vault audit enable file file_path=/vault/audit/audit.log\n\n# Seed secrets\n[ -n \"${CF_API_TOKEN}\" ] &amp;&amp; vault kv put kv/cloudflare/api token=\"${CF_API_TOKEN}\" &amp;&amp; echo \"Seeded: kv/cloudflare/api\"\n[ -n \"${PG_PASS}\" ] &amp;&amp; vault kv put kv/db/postgres username=\"${PG_USER}\" password=\"${PG_PASS}\" url=\"${PG_URL}\" &amp;&amp; echo \"Seeded: kv/db/postgres\"\n\n# Smoke and snapshot\nvault kv put kv/test hello=world &gt;/dev/null\nvault kv get kv/test &gt;/dev/null &amp;&amp; echo \"KV test OK\"\n\nSNAP=/vault/data/bootstrap-$(date +%Y%m%d-%H%M%S).snap\nvault operator raft snapshot save \"${SNAP}\"\necho \"Snapshot: ${SNAP}\"\nEOF\n\nchmod +x /tmp/init.sh\n\n# Required: export VAULT_TOKEN to your current root token\nVAULT_TOKEN=&lt;root-token-here&gt; /tmp/init.sh\n</code></pre> <p>Optional seeds: <pre><code>export CF_API_TOKEN=&lt;CF token&gt;           # optional\nexport PG_PASS=&lt;postgres password&gt;       # optional\nexport PG_USER=svc_app\nexport PG_URL=\"postgres://host:5432/app\"\nVAULT_TOKEN=&lt;root-token&gt; /tmp/init.sh\n</code></pre></p>"},{"location":"runbooks/vault_bootstrap_runbook/#manual-minimal-steps-if-not-using-script","title":"Manual Minimal Steps (if not using script)","text":"<pre><code>export VAULT_ADDR=https://vault:8200\nexport VAULT_CACERT=/pki/ca.pem\nexport VAULT_TOKEN=&lt;root&gt;\n\nvault secrets enable -path=kv kv-v2\n\ncat &gt;/tmp/admin.hcl &lt;&lt;'EOF'\npath \"sys/*\"  { capabilities = [\"create\",\"read\",\"update\",\"delete\",\"list\",\"sudo\"] }\npath \"auth/*\" { capabilities = [\"create\",\"read\",\"update\",\"delete\",\"list\",\"sudo\"] }\npath \"kv/*\"   { capabilities = [\"create\",\"read\",\"update\",\"delete\",\"list\"] }\nEOF\nvault policy write admin /tmp/admin.hcl\n\nvault auth enable userpass\nADMIN_PW=\"$(head -c 18 /dev/urandom | base64)\"; echo \"admin: ${ADMIN_PW}\"\nvault write auth/userpass/users/admin password=\"${ADMIN_PW}\" policies=admin\n\nmkdir -p /vault/audit\nvault audit enable file file_path=/vault/audit/audit.log\n</code></pre>"},{"location":"runbooks/vault_bootstrap_runbook/#backups","title":"Backups","text":"<p>Include in Hyper Backup: - <code>/volume1/docker/appdata/vault/data</code>  [Raft, snapshots] - <code>/volume1/docker/appdata/vault/audit</code> - <code>/volume1/docker/appdata/vault/config</code> - <code>/volume1/docker/appdata/pki</code>  [include <code>ca.key</code> if you want to reissue]</p> <p>Run a snapshot after bootstrap: <pre><code>vault operator raft snapshot save /vault/data/post-bootstrap.snap\n</code></pre></p>"},{"location":"runbooks/vault_bootstrap_runbook/#what-to-save","title":"What to save","text":"<ul> <li>Unseal key shares: all 5. Threshold 3.</li> <li>Current root token.</li> <li>If used: bootstrap <code>admin</code> userpass and <code>svc</code> userpass credentials.</li> <li>Snapshot file names and locations.</li> </ul>"},{"location":"runbooks/vault_bootstrap_runbook/#troubleshooting-quick-hits","title":"Troubleshooting quick hits","text":"<ul> <li> <p>permission denied /vault/data/vault.db   Fix host ownership to 1030:100, ensure parents 755, data 700. Remove stale <code>vault.db</code>, <code>raft/</code>. Clear DSM ACLs if present.</p> </li> <li> <p>mlock failures   Set <code>disable_mlock = true</code> in <code>vault.hcl</code>. For ulimit route, add <code>ulimits: { memlock: -1 }</code> and keep <code>IPC_LOCK</code>.</p> </li> <li> <p>TLS cert not found or permission denied   Bind files individually:   <pre><code>- /volume1/.../pki/vault.crt:/pki/vault.crt:ro\n- /volume1/.../pki/vault.key:/pki/vault.key:ro\n- /volume1/.../pki/ca.pem:/pki/ca.pem:ro\n</code></pre>   Ensure <code>/pki/vault.key</code> is readable by uid 1030.</p> </li> <li> <p>x509 cannot validate 127.0.0.1   Use <code>https://vault:8200</code> inside the container or add IP SANs when minting the cert.</p> </li> <li> <p>CAP_SETFCAP errors when running as 1030   Set <code>SKIP_SETCAP=true</code> in environment.</p> </li> <li> <p>403 permission denied on CLI <code>VAULT_TOKEN</code> not set or wrong. Re-export it or generate a new root with <code>generate-root</code>.</p> </li> </ul>"},{"location":"runbooks/vault_bootstrap_runbook/#restore-runbook","title":"Restore Runbook","text":"<ol> <li>Restore backup folders to the same paths.  </li> <li>Redeploy Portainer stack.  </li> <li>Unseal with any 3 shares.  </li> <li><code>export VAULT_ADDR=https://vault:8200 VAULT_CACERT=/pki/ca.pem</code> </li> <li><code>vault status</code> should show active.  </li> <li>Re-enable audit if the path changed.  </li> <li>Rotate root token. Optionally disable <code>userpass</code> when OIDC is ready.</li> </ol>"}]}